---
title: codemelted_network Module
---
classDiagram
  direction TB
  namespace codemelted {
    class codemelted_network {
      +fetch(CFetchRequest) CFetchResponse
      +host_name() String
      +monitor() CNetworkMonitor
      +online() bool
      +serve(bind_addr, handler)
      +upgrade_web_socket(request) CWebSocketProtocol
      +web_rtc()
    }
    class CFetchAction {
      +Delete
      +Get
      +Post
      +Put
    }
    class CFetchRequest {
      +new(CFetchAction, url) CFetchRequest
      +basic_auth(username, password)
      +bearer_auth(token)
      +body(CObject)
      +form(HashMap)
      +header(key, value)
      -send(self) CFetchResponse
    }
    class CFetchResponse {
      -new(status, status_text, data_as_bytes, data_as_json, stat_as_string) CFetchResponse
      +status() u16
      +status_text() String
      +data_as_bytes() Option
      +data_as_json() Option
      +data_as_string() Option
    }
    class CNetworkMonitor {
      -new() CNetworkMonitor
      +refresh()
      +names() Vec
      +mac_address(name) String
      +mtu(name) u64
      +network_total_rx_bytes(name) -> u64
      +network_total_rx_errors(name) -> u64
      +network_total_rx_packets(name) -> u64
      +network_total_tx_bytes(name) -> u64
      +network_total_tx_errors(name) -> u64
      +network_total_tx_packets(name) -> u64
    }
    class CServerRequest
    class CServerResponse
    class CWebSocketData {
      +NoData
      +SocketClosed
      +IoError
      +Bytes
      +String
      +data_as_bytes(self) Option
      +data_as_string(self) Option
      +io_error_as_string(self) Option
    }
    class CWebSocketProtocol {
      -id String
      -socket Websocket
      -error Option
    }
    class CCsvFormat {
      +csv_header() String
      +as_csv() String
    }
    class CProtocolHandler {
      +error() Option
      +get_message(request) T
      +id() String
      +is_running() bool
      +post_message(data)
      +terminate()
    }
  }
  namespace rouille {
    class start_server
    class websocket {
      +Message
      +SendError
      +WebsocketError
    }
    class Request
    class Response
  }
  namespace reqwest {
    class Client
    class RequestBuilder
  }
  namespace sysinfo {
    class Networks
    class System
  }
  namespace tokio {
    class runtime {
      +Runtime
    }
  }
  codemelted_network --> CFetchRequest: uses
  codemelted_network --> CFetchResponse: creates
  codemelted_network --> CNetworkMonitor: creates
  codemelted_network --> CServerRequest: uses
  codemelted_network --> CServerResponse: creates
  codemelted_network --> CWebSocketProtocol: creates
  codemelted_network --> start_server: uses
  codemelted_network --> runtime: uses
  CServerRequest --> Request: maps to
  CServerResponse --> Response: maps to
  CFetchRequest --> CFetchAction: uses
  CFetchRequest --> Client: uses
  CFetchRequest --> RequestBuilder: uses
  CNetworkMonitor --> CCsvFormat: implements
  CNetworkMonitor --> Networks: uses
  CNetworkMonitor --> System: uses
  CWebSocketProtocol --> CProtocolHandler: implements
  CWebSocketProtocol --> CWebSocketData: creates / uses
  CWebSocketProtocol --> websocket: uses
